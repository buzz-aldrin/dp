3.  The Longest Increasing Subsequence - https://www.geeksforgeeks.org/longest-increasing-subsequence-dp-3/
    (LIS) problem is to find the length of the longest subsequence of a given sequence such that all elements of the
    subsequence are sorted in increasing order. For example, the length of LIS
    for  and LIS is .

    Examples:
        {10, 22, 9, 33, 21, 50, 41, 60, 80} LIS is 6 i.e {10, 22, 33, 50, 60, 80}
    Explanation:
         10	22	29	24	25	50	41	60	80
    LIS  1	2	3	3	4	5	5	6	7
                        LIS(4)
                /			|		\
            LIS(3)		LIS(2)		LIS(1)
            /	\			|
        LIS(2)	LIS(1)	LIS(1)
        /
    LIS(1)


4.  Longest Common Subsequence - https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/
    It is a classic computer science problem, the basis of diff (a file comparison program that outputs the differences
    between two files), and has applications in bio-informatics.

    Examples:
    LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH” of length 3.
    LCS for input Sequences “AGGTAB” and “GXTXAYB” is “GTAB” of length 4.

                            lcs("AXYT", "AYZX")
                           /                 \
             lcs("AXY", "AYZX")            lcs("AXYT", "AYZ")
             /                \              /               \
    lcs("AX", "AYZX") lcs("AXY", "AYZ")   lcs("AXY", "AYZ") lcs("AXYT", "AY")

5.  Edit Distance - https://www.geeksforgeeks.org/edit-distance-dp-5/
    Given two strings str1 and str2 and below operations that can performed on str1. Find minimum number of edits
    (operations) required to convert ‘str1’ into ‘str2’.
    a. Insert
    b. Remove
    c. Replace
    All of the above operations are of equal cost.
    Examples:
        Input:   str1 = "geek", str2 = "gesek"
        Output:  1
        We can convert str1 into str2 by inserting a 's'.

        Input:   str1 = "cat", str2 = "cut"
        Output:  1
        We can convert str1 into str2 by replacing 'a' with 'u'.

7.  Coin Change - https://www.geeksforgeeks.org/coin-change-dp-7/
    Given a cost matrix cost[][] and a position (m, n) in cost[][], write a function that returns cost of minimum cost path
    to reach (m, n) from (0, 0). Each cell of the matrix represents a cost to traverse through that cell. Total cost of a
    path to reach (m, n) is sum of all the costs on that path (including both source and destination). You can only
    traverse down, right and diagonally lower cells from a given cell,
    i.e., from a given cell (i, j), cells (i+1, j), (i, j+1) and (i+1, j+1) can be traversed.
    You may assume that all costs are positive integers.

    1) Optimal Substructure
    The path to reach (m, n) must be through one of the 3 cells: (m-1, n-1) or (m-1, n) or (m, n-1). So minimum cost to
    reach (m, n) can be written as “minimum of the 3 cells plus cost[m][n]”.

    minCost(m, n) = min (minCost(m-1, n-1), minCost(m-1, n), minCost(m, n-1)) + cost[m][n]

    2) Overlapping Subproblems
    Following is simple recursive implementation of the MCP (Minimum Cost Path) problem. The implementation simply follows
    the recursive structure mentioned above.